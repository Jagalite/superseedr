name: Rust

on:
  push:
    branches: [ "main" ]
    tags:
      - 'v*'
  pull_request:
    branches: [ "main" ]

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always
  APP_NAME: superseedr

jobs:
  build_linux:
    name: Build & Test (Linux)
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v5

    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev

    - name: Build
      run: cargo build --verbose --release
    - name: Run tests
      run: cargo test --verbose

    # --- Bundling Steps (Only on Tags) ---
    - name: Install cargo-bundle
      if: startsWith(github.ref, 'refs/tags/')
      run: cargo install cargo-bundle

    - name: Create Staging Directory
      if: startsWith(github.ref, 'refs/tags/')
      run: mkdir staging

    - name: Build Private Debian Package
      if: startsWith(github.ref, 'refs/tags/')
      run: cargo bundle --release --no-default-features --format deb

    - name: Move Renamed Private Debian Package
      if: startsWith(github.ref, 'refs/tags/')
      run: |
        VERSION=$(grep '^version =' Cargo.toml | head -n 1 | sed 's/version = "\(.*\)"/\1/')
        DEB_NAME="${APP_NAME}_${VERSION}_amd64.deb"
        mv "target/release/bundle/deb/$DEB_NAME" "staging/${APP_NAME}-private_${VERSION}_amd64.deb"

    - name: Build Normal Debian Package
      if: startsWith(github.ref, 'refs/tags/')
      run: cargo bundle --release --format deb

    - name: Move Normal Debian Package to Staging
      if: startsWith(github.ref, 'refs/tags/')
      run: |
        VERSION=$(grep '^version =' Cargo.toml | head -n 1 | sed 's/version = "\(.*\)"/\1/')
        DEB_NAME="${APP_NAME}_${VERSION}_amd64.deb"
        mv "target/release/bundle/deb/$DEB_NAME" "staging/"

    - name: Upload Debian Package Artifacts
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/upload-artifact@v4
      with:
        name: superseedr-linux-amd64-debs-${{ github.ref_name }}
        path: staging/*.deb

  bundle_macos:
    name: Build macOS Universal PKG (${{ matrix.suffix }})
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: macos-latest
    strategy:
      matrix:
        include:
          - suffix: "normal"
            flags: ""
          - suffix: "private"
            flags: --no-default-features
    steps:
    - uses: actions/checkout@v5 # <-- Ensures script is present

    - name: Install Rust Apple Targets
      run: |
        rustup target add aarch64-apple-darwin
        rustup target add x86_64-apple-darwin

    - name: Execute Custom macOS Build Script
      id: build_pkg
      run: |
        SCRIPT_PATH="build_scripts/build_osx_universal_pkg.sh"
        chmod +x "$SCRIPT_PATH"
        
        # This will run the script, print its output to the console,
        # AND save it to 'build_log.txt' at the same time.
        # The 'pipefail' ensures that if the script fails, the step fails.
        set -o pipefail
        "$SCRIPT_PATH" \
          ${{ github.ref_name }} \
          ${{ matrix.suffix }} \
          ${{ matrix.flags }} \
          2>&1 | tee build_log.txt
        
        # Now, extract the path from the log file
        PKG_PATH=$(grep 'PKG_PATH=' build_log.txt | sed 's/PKG_PATH=//')
        
        # Check if PKG_PATH was found
        if [ -z "$PKG_PATH" ]; then
          echo "::error::Build script finished, but 'PKG_PATH=' was not found in the log."
          exit 1
        fi
        
        echo "PKG_PATH found: $PKG_PATH"
        echo "pkg_path=$PKG_PATH" >> $GITHUB_OUTPUT

    - name: Upload macOS PKG Artifact
      uses: actions/upload-artifact@v4
      with:
        name: superseedr-macos-${{ matrix.suffix }}-universal-${{ github.ref_name }} 
        path: ${{ steps.build_pkg.outputs.pkg_path }}

  build_windows:
    name: Build Windows MSI (${{ matrix.suffix }})
    #if: startsWith(github.ref, 'refs/tags/')
    if: false
    runs-on: windows-latest
    strategy:
      matrix:
        include:
          - suffix: "normal"
            flags: ""
          - suffix: "private"
            flags: "--no-default-features"
    steps:
    - uses: actions/checkout@v5

    - name: Install Rust MSVC Target
      run: rustup target add x86_64-pc-windows-msvc
      
    - name: Install WiX Toolset
      # WiX is required for building MSI installers
      run: choco install wix

    - name: Install cargo-bundle
      run: cargo install cargo-bundle

    - name: Build MSI Installer (${{ matrix.suffix }})
      run: cargo bundle --release ${{ matrix.flags }} --format msi

    - name: Stage MSI
      run: |
        # Get the version from Cargo.toml to find the file
        $VERSION = (Get-Content Cargo.toml | Select-String -Pattern '^version = "(.+)"').Matches.Groups[1].Value
        $MSI_NAME = "${{ env.APP_NAME }}-${{ matrix.suffix }}_${VERSION}_x64_en-US.msi"
        
        # Create staging dir
        mkdir staging
        
        # Rename and move the MSI
        $SOURCE_PATH = "target/release/bundle/msi/${{ env.APP_NAME }}_${VERSION}_x64_en-US.msi"
        $DEST_PATH = "staging/$MSI_NAME"
        
        echo "Moving $SOURCE_PATH to $DEST_PATH"
        mv $SOURCE_PATH $DEST_PATH

    - name: Upload Windows MSI Artifact
      uses: actions/upload-artifact@v4
      with:
        name: superseedr-windows-${{ matrix.suffix }}-${{ github.ref_name }}
        path: staging/*.msi
  # --- END NEW JOB ---

  release:
    name: Create GitHub Release
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    # --- MODIFIED ---
    needs: [build_linux, bundle_macos, build_windows] # Wait for ALL jobs
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Set Release Version
        run: echo "RELEASE_VERSION=$(echo ${{ github.ref_name }} | sed 's/^v//')" >> $GITHUB_ENV
      
      - name: Create Release and Upload Artifacts
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ github.ref_name }}
          body: |
            ## Standard Builds (Recommended)
            * **Windows (Installer):** `superseedr-normal_${{ env.RELEASE_VERSION }}_x64_en-US.msi`
            * **macOS Universal:** `superseedr-${{ env.RELEASE_VERSION }}-universal-macos.pkg`
            * **Linux (Debian):** `superseedr_${{ env.RELEASE_VERSION }}_amd64.deb`

            ---
            ## Private Builds (Advanced)
            These builds disable all network features, including telemetry and auto-updates.
            
            * **Windows (Installer):** `superseedr-private_${{ env.RELEASE_VERSION }}_x64_en-US.msi`
            * **macOS Universal:** `superseedr-${{ env.RELEASE_VERSION }}-private-universal-macos.pkg`
            * **Linux (Debian):** `superseedr-private_${{ env.RELEASE_VERSION }}_amd64.deb`
          # --- MODIFIED ---
          files: |
            artifacts/superseedr-linux-amd64-debs-${{ github.ref_name }}/*.deb
            artifacts/superseedr-macos-*-universal-${{ github.ref_name }}/*.pkg
            artifacts/superseedr-windows-*-${{ github.ref_name }}/*.msi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
