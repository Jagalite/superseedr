name: Rust

on:
  push:
    branches: [ "main" ]
    tags:
      - 'v*'
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always
  APP_NAME: superseedr

jobs:
  build_linux:
    name: Build & Test (Linux)
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v5

    - name: Install Dependencies
      run: |
        # These packages provide the missing 'libxcb', 'libxcb-render', 'libxcb-shape', 
        # and 'libxcb-xfixes' development files required for clipboard functionality on Linux.
        sudo apt-get update
        sudo apt-get install -y libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev

    - name: Build
      run: cargo build --verbose --release
    - name: Run tests
      run: cargo test --verbose

    - name: Install cargo-bundle
      # Only needed if bundling, potentially only on tags
      if: startsWith(github.ref, 'refs/tags/')
      run: cargo install cargo-bundle

    - name: Build Debian Package
      # Only run this step when creating a tag (release)
      if: startsWith(github.ref, 'refs/tags/')
      run: cargo bundle --release --format deb

    - name: Upload Debian Package Artifact
      # Only upload when creating a tag (release)
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/upload-artifact@v4
      with:
        name: superseedr-linux-amd64-${{ github.ref_name }} # e.g., superseedr-linux-amd64-v1.0.0
        path: target/release/bundle/deb/*.deb # Upload the generated .deb file(s)

  bundle_macos:
      name: Bundle macOS App
      if: false
      runs-on: macos-latest
      steps:
      - uses: actions/checkout@v5

      - name: Install cargo-bundle
        run: cargo install cargo-bundle

      - name: Create Contents directory
        run: mkdir -p "target/release/bundle/macos/${{ env.APP_NAME }}.app/Contents"

      - name: Build and Bundle macOS Application
        run: cargo bundle --target ${{ matrix.target }} # Build for the specific target

      - name: Install create-dmg
        run: brew install create-dmg
      - name: Create DMG
        run: |
          dmg_name="${{ env.APP_NAME }}-${{ github.ref_name }}-macos-${{ matrix.arch }}.dmg"
          create-dmg \
            --volname "${{ env.APP_NAME }} ${{ github.ref_name }}" \
            --window-pos 200 120 \
            --window-size 800 400 \
            --icon-size 100 \
            --icon "${{ env.APP_NAME }}.app" 200 190 \
            --hide-extension "${{ env.APP_NAME }}.app" \
            --app-drop-link 600 185 \
            "target/release/${dmg_name}" \
            "target/release/bundle/macos/"

      - name: Upload macOS App Bundle Artifact
        uses: actions/upload-artifact@v4
        with:
          name: superseedr-macos-${{ matrix.arch }}-${{ github.ref_name }} # e.g., superseedr-macos-x86_64-v1.0.0
          path: target/release/*.dmg

      strategy:
        matrix:
          include:
            - target: x86_64-apple-darwin
              arch: x86_64
            - target: aarch64-apple-darwin
              arch: aarch64

  release:
      name: Create GitHub Release
      # Only run this job when a tag is pushed
      if: startsWith(github.ref, 'refs/tags/')
      runs-on: ubuntu-latest
      # This job must wait for the build and bundle jobs to finish
      needs: [build_linux, bundle_macos]
      steps:
        - name: Download all build artifacts
          uses: actions/download-artifact@v4
          with:
            # Download all artifacts into a directory named 'artifacts'
            path: artifacts/

        - name: Create Release and Upload Artifacts
          uses: softprops/action-gh-release@v2
          with:
            # This creates a release with the name of the tag (e.g., "v1.0.0")
            name: ${{ github.ref_name }}
            # These globs find the artifacts you uploaded in the previous jobs
            files: |
              artifacts/superseedr-linux-amd64-${{ github.ref_name }}/*.deb
              artifacts/superseedr-macos-x86_64-${{ github.ref_name }}/*.dmg
              artifacts/superseedr-macos-aarch64-${{ github.ref_name }}/*.dmg
            # This is required to grant permission to the action
            env:
              GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
