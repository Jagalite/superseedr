name: Rust

on:
  push:
    branches: [ "main" ]
    tags:
      - 'v*'
  pull_request:
    branches: [ "main" ]

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always
  APP_NAME: superseedr

jobs:
  build_linux:
    name: Build & Test (Linux)
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v5

    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev

    - name: Build
      run: cargo build --verbose --release
    - name: Run tests
      run: cargo test --verbose

    # --- Bundling Steps (Only on Tags) ---
    - name: Install cargo-bundle
      if: startsWith(github.ref, 'refs/tags/')
      run: cargo install cargo-bundle

    - name: Create Staging Directory
      if: startsWith(github.ref, 'refs/tags/')
      run: mkdir staging

    - name: Build Private Debian Package
      if: startsWith(github.ref, 'refs/tags/')
      run: cargo bundle --release --no-default-features --format deb

    - name: Move Renamed Private Debian Package to Staging
      if: startsWith(github.ref, 'refs/tags/')
      run: |
        deb_file=$(find target/release/bundle/deb -name '*.deb')
        new_name=$(echo "$deb_file" | sed 's/\(.*\)_amd64.deb/\1-private_amd64.deb/')
        echo "Moving $deb_file to staging/$new_name"
        mv "$deb_file" "staging/$(basename "$new_name")"

    - name: Build Normal Debian Package
      if: startsWith(github.ref, 'refs/tags/')
      run: cargo bundle --release --format deb

    - name: Move Normal Debian Package to Staging
      if: startsWith(github.ref, 'refs/tags/')
      run: |
        deb_file=$(find target/release/bundle/deb -name '*.deb')
        echo "Moving $deb_file to staging/"
        mv "$deb_file" staging/

    - name: Upload Debian Package Artifacts
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/upload-artifact@v4
      with:
        name: superseedr-linux-amd64-debs-${{ github.ref_name }}
        path: staging/*.deb

  bundle_macos:
    name: Build macOS Universal PKG (${{ matrix.suffix }})
    #if: startsWith(github.ref, 'refs/tags/')
    runs-on: macos-latest
    strategy:
      matrix:
        include:
          - suffix: "normal"
            flags: ""
          - suffix: "private"
            flags: "--no-default-features"
    steps:
    - uses: actions/checkout@v5

    - name: Install Rust Apple Targets
      run: |
        rustup target add aarch64-apple-darwin
        rustup target add x86_64-apple-darwin

    - name: Execute Custom macOS Build Script
      id: build_pkg
      run: |
        # Make sure your script is at this path
        SCRIPT_PATH="build_scripts/build_osx_universal_pkg.sh"
        chmod +x "$SCRIPT_PATH"
        
        # Pass Version, Suffix, and Cargo Flags
        # Note the quotes around flags to handle the empty string
        OUTPUT=$(
          "$SCRIPT_PATH" \
          ${{ github.ref_name }} \
          ${{ matrix.suffix }} \
          "${{ matrix.flags }}" \
          2>&1
        )
        
        echo "$OUTPUT"
        
        PKG_PATH=$(echo "$OUTPUT" | grep 'PKG_PATH=' | sed 's/PKG_PATH=//')
        echo "PKG_PATH found: $PKG_PATH"
        echo "pkg_path=$PKG_PATH" >> $GITHUB_OUTPUT

    - name: Upload macOS PKG Artifact
      uses: actions/upload-artifact@v4
      with:
        # Include the suffix in the artifact name to keep them separate
        name: superseedr-macos-${{ matrix.suffix }}-universal-${{ github.ref_name }} 
        path: ${{ steps.build_pkg.outputs.pkg_path }}

  release:
    name: Create GitHub Release
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    needs: [build_linux, bundle_macos] # Wait for both jobs
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Create Release and Upload Artifacts
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ github.ref_name }}
          # Use a glob to find BOTH .pkg files
          files: |
            artifacts/superseedr-linux-amd64-debs-${{ github.ref_name }}/*.deb
            artifacts/superseedr-macos-*-universal-${{ github.ref_name }}/*.pkg
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
