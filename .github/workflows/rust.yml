name: Rust

on:
  push:
    branches: [ "main" ]
    tags:
      - 'v*'
  pull_request:
    branches: [ "main" ]

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always
  APP_NAME: superseedr

jobs:
  build_linux:
    name: Build & Test (Linux)
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v5

    - name: Install Dependencies
      run: |
        # These packages provide the missing 'libxcb', 'libxcb-render', 'libxcb-shape', 
        # and 'libxcb-xfixes' development files required for clipboard functionality on Linux.
        sudo apt-get update
        sudo apt-get install -y libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev

    - name: Build
      run: cargo build --verbose --release
    - name: Run tests
      run: cargo test --verbose

    # --- Bundling Steps (Only on Tags) ---
    - name: Install cargo-bundle
      if: startsWith(github.ref, 'refs/tags/')
      run: cargo install cargo-bundle

    # --- Create Staging Directory ---
    - name: Create Staging Directory
      if: startsWith(github.ref, 'refs/tags/')
      run: mkdir staging # Create a directory outside the target folder

    # --- Build and Bundle PRIVATE Version ---
    - name: Build Private Debian Package
      if: startsWith(github.ref, 'refs/tags/')
      run: cargo bundle --release --no-default-features --format deb

    - name: Move Renamed Private Debian Package to Staging
      if: startsWith(github.ref, 'refs/tags/')
      run: |
        deb_file=$(find target/release/bundle/deb -name '*.deb')
        new_name=$(echo "$deb_file" | sed 's/\(.*\)_amd64.deb/\1-private_amd64.deb/')
        # Rename directly into the staging directory
        echo "Moving $deb_file to staging/$new_name"
        mv "$deb_file" "staging/$(basename "$new_name")" # Use basename to get just the filename

    # --- Build and Bundle NORMAL Version ---
    - name: Build Normal Debian Package
      if: startsWith(github.ref, 'refs/tags/')
      run: cargo bundle --release --format deb # No feature flags = default

    - name: Move Normal Debian Package to Staging
      if: startsWith(github.ref, 'refs/tags/')
      run: |
        deb_file=$(find target/release/bundle/deb -name '*.deb')
        echo "Moving $deb_file to staging/"
        mv "$deb_file" staging/ # Move the normal deb file

    # --- Upload BOTH Artifacts from Staging ---
    - name: Upload Debian Package Artifacts
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/upload-artifact@v4
      with:
        name: superseedr-linux-amd64-debs-${{ github.ref_name }}
        # Upload everything from the staging directory
        path: staging/*.deb # <-- Change this path

  bundle_macos:
    name: Build macOS DMG (${{ matrix.arch }})
    #if: startsWith(github.ref, 'refs/tags/')
    if: true
    runs-on: macos-latest
    strategy:
      matrix:
        include:
          - target: x86_64-apple-darwin
            arch: x86_64
          - target: aarch64-apple-darwin
            arch: aarch64
    steps:
    - uses: actions/checkout@v5

    - name: Install cargo-bundle
      run: cargo install cargo-bundle

    - name: Install create-dmg
      run: brew install create-dmg

    - name: Execute Custom macOS Build Script
      id: build_dmg
      run: |
        SCRIPT_PATH="build_scripts/build_osx.sh"
        # Make script executable
        chmod +x "$SCRIPT_PATH"
        
        # Execute the script, passing arguments: TARGET_TRIPLE, ARCH, VERSION
        # We capture the output to get the final DMG_PATH
        OUTPUT=$(
          "$SCRIPT_PATH" \
          ${{ matrix.target }} \
          ${{ matrix.arch }} \
          ${{ github.ref_name }} \
          2>&1
        )
        echo "$OUTPUT"
        
        # Extract the DMG_PATH variable which is echoed at the end of the script
        # This uses the marker 'DMG_PATH='
        DMG_PATH=$(echo "$OUTPUT" | grep 'DMG_PATH=' | sed 's/DMG_PATH=//')
        echo "DMG_PATH found: $DMG_PATH"
        echo "dmg_path=$DMG_PATH" >> $GITHUB_OUTPUT

    - name: Upload macOS DMG Artifact
      uses: actions/upload-artifact@v4
      with:
        name: superseedr-macos-${{ matrix.arch }}-${{ github.ref_name }} 
        path: ${{ steps.build_dmg.outputs.dmg_path }}

  release:
    name: Create GitHub Release
    # Only run this job when a tag is pushed
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    # This job must wait for the build and bundle jobs to finish
    needs: [build_linux]
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          # Download all artifacts into a directory named 'artifacts'
          path: artifacts/

      - name: Create Release and Upload Artifacts
        uses: softprops/action-gh-release@v2
        with:
          # This creates a release with the name of the tag (e.g., "v1.0.0")
          name: ${{ github.ref_name }}
          # These globs find the artifacts you uploaded in the previous jobs
          files: |
            artifacts/superseedr-linux-amd64-debs-${{ github.ref_name }}/*.deb
          # files: |
          #  artifacts/superseedr-linux-amd64-${{ github.ref_name }}/*.deb
          #  artifacts/superseedr-macos-x86_64-${{ github.ref_name }}/*.dmg
          #  artifacts/superseedr-macos-aarch64-${{ github.ref_name }}/*.dmg
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
